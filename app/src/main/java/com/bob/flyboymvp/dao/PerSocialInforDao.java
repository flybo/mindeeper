package com.bob.flyboymvp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bob.flyboymvp.model.PerSocialInfor;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PER_SOCIAL_INFOR".
*/
public class PerSocialInforDao extends AbstractDao<PerSocialInfor, Long> {

    public static final String TABLENAME = "PER_SOCIAL_INFOR";

    /**
     * Properties of entity PerSocialInfor.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Per_user_guid = new Property(1, String.class, "per_user_guid", false, "PER_USER_GUID");
        public final static Property Per_social_infor_id = new Property(2, int.class, "per_social_infor_id", false, "PER_SOCIAL_INFOR_ID");
        public final static Property Per_addr_list_id = new Property(3, int.class, "per_addr_list_id", false, "PER_ADDR_LIST_ID");
        public final static Property Per_motto = new Property(4, String.class, "per_motto", false, "PER_MOTTO");
        public final static Property Per_contact_purpose = new Property(5, String.class, "per_contact_purpose", false, "PER_CONTACT_PURPOSE");
        public final static Property Per_giving_field = new Property(6, String.class, "per_giving_field", false, "PER_GIVING_FIELD");
        public final static Property Per_marriage = new Property(7, int.class, "per_marriage", false, "PER_MARRIAGE");
        public final static Property Per_children = new Property(8, int.class, "per_children", false, "PER_CHILDREN");
        public final static Property Per_birthday = new Property(9, String.class, "per_birthday", false, "PER_BIRTHDAY");
        public final static Property Per_birth_date = new Property(10, String.class, "per_birth_date", false, "PER_BIRTH_DATE");
        public final static Property Per_birth_lunar = new Property(11, String.class, "per_birth_lunar", false, "PER_BIRTH_LUNAR");
        public final static Property Per_zodiac = new Property(12, int.class, "per_zodiac", false, "PER_ZODIAC");
        public final static Property Per_constellation = new Property(13, int.class, "per_constellation", false, "PER_CONSTELLATION");
        public final static Property Per_enneagram = new Property(14, String.class, "per_enneagram", false, "PER_ENNEAGRAM");
        public final static Property Per_character = new Property(15, String.class, "per_character", false, "PER_CHARACTER");
        public final static Property Per_sport_hobby = new Property(16, String.class, "per_sport_hobby", false, "PER_SPORT_HOBBY");
        public final static Property Per_ent_hobby = new Property(17, String.class, "per_ent_hobby", false, "PER_ENT_HOBBY");
        public final static Property Per_leisure_hobby = new Property(18, String.class, "per_leisure_hobby", false, "PER_LEISURE_HOBBY");
        public final static Property Per_culture_hobby = new Property(19, String.class, "per_culture_hobby", false, "PER_CULTURE_HOBBY");
        public final static Property Per_read_hobby = new Property(20, String.class, "per_read_hobby", false, "PER_READ_HOBBY");
        public final static Property Per_read_time = new Property(21, int.class, "per_read_time", false, "PER_READ_TIME");
        public final static Property Per_tv_hobby = new Property(22, String.class, "per_tv_hobby", false, "PER_TV_HOBBY");
        public final static Property Per_tv_time = new Property(23, int.class, "per_tv_time", false, "PER_TV_TIME");
        public final static Property Per_like_idol = new Property(24, String.class, "per_like_idol", false, "PER_LIKE_IDOL");
    }


    public PerSocialInforDao(DaoConfig config) {
        super(config);
    }
    
    public PerSocialInforDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PER_SOCIAL_INFOR\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PER_USER_GUID\" TEXT," + // 1: per_user_guid
                "\"PER_SOCIAL_INFOR_ID\" INTEGER NOT NULL ," + // 2: per_social_infor_id
                "\"PER_ADDR_LIST_ID\" INTEGER NOT NULL ," + // 3: per_addr_list_id
                "\"PER_MOTTO\" TEXT," + // 4: per_motto
                "\"PER_CONTACT_PURPOSE\" TEXT," + // 5: per_contact_purpose
                "\"PER_GIVING_FIELD\" TEXT," + // 6: per_giving_field
                "\"PER_MARRIAGE\" INTEGER NOT NULL ," + // 7: per_marriage
                "\"PER_CHILDREN\" INTEGER NOT NULL ," + // 8: per_children
                "\"PER_BIRTHDAY\" TEXT," + // 9: per_birthday
                "\"PER_BIRTH_DATE\" TEXT," + // 10: per_birth_date
                "\"PER_BIRTH_LUNAR\" TEXT," + // 11: per_birth_lunar
                "\"PER_ZODIAC\" INTEGER NOT NULL ," + // 12: per_zodiac
                "\"PER_CONSTELLATION\" INTEGER NOT NULL ," + // 13: per_constellation
                "\"PER_ENNEAGRAM\" TEXT," + // 14: per_enneagram
                "\"PER_CHARACTER\" TEXT," + // 15: per_character
                "\"PER_SPORT_HOBBY\" TEXT," + // 16: per_sport_hobby
                "\"PER_ENT_HOBBY\" TEXT," + // 17: per_ent_hobby
                "\"PER_LEISURE_HOBBY\" TEXT," + // 18: per_leisure_hobby
                "\"PER_CULTURE_HOBBY\" TEXT," + // 19: per_culture_hobby
                "\"PER_READ_HOBBY\" TEXT," + // 20: per_read_hobby
                "\"PER_READ_TIME\" INTEGER NOT NULL ," + // 21: per_read_time
                "\"PER_TV_HOBBY\" TEXT," + // 22: per_tv_hobby
                "\"PER_TV_TIME\" INTEGER NOT NULL ," + // 23: per_tv_time
                "\"PER_LIKE_IDOL\" TEXT);"); // 24: per_like_idol
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PER_SOCIAL_INFOR\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PerSocialInfor entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String per_user_guid = entity.getPer_user_guid();
        if (per_user_guid != null) {
            stmt.bindString(2, per_user_guid);
        }
        stmt.bindLong(3, entity.getPer_social_infor_id());
        stmt.bindLong(4, entity.getPer_addr_list_id());
 
        String per_motto = entity.getPer_motto();
        if (per_motto != null) {
            stmt.bindString(5, per_motto);
        }
 
        String per_contact_purpose = entity.getPer_contact_purpose();
        if (per_contact_purpose != null) {
            stmt.bindString(6, per_contact_purpose);
        }
 
        String per_giving_field = entity.getPer_giving_field();
        if (per_giving_field != null) {
            stmt.bindString(7, per_giving_field);
        }
        stmt.bindLong(8, entity.getPer_marriage());
        stmt.bindLong(9, entity.getPer_children());
 
        String per_birthday = entity.getPer_birthday();
        if (per_birthday != null) {
            stmt.bindString(10, per_birthday);
        }
 
        String per_birth_date = entity.getPer_birth_date();
        if (per_birth_date != null) {
            stmt.bindString(11, per_birth_date);
        }
 
        String per_birth_lunar = entity.getPer_birth_lunar();
        if (per_birth_lunar != null) {
            stmt.bindString(12, per_birth_lunar);
        }
        stmt.bindLong(13, entity.getPer_zodiac());
        stmt.bindLong(14, entity.getPer_constellation());
 
        String per_enneagram = entity.getPer_enneagram();
        if (per_enneagram != null) {
            stmt.bindString(15, per_enneagram);
        }
 
        String per_character = entity.getPer_character();
        if (per_character != null) {
            stmt.bindString(16, per_character);
        }
 
        String per_sport_hobby = entity.getPer_sport_hobby();
        if (per_sport_hobby != null) {
            stmt.bindString(17, per_sport_hobby);
        }
 
        String per_ent_hobby = entity.getPer_ent_hobby();
        if (per_ent_hobby != null) {
            stmt.bindString(18, per_ent_hobby);
        }
 
        String per_leisure_hobby = entity.getPer_leisure_hobby();
        if (per_leisure_hobby != null) {
            stmt.bindString(19, per_leisure_hobby);
        }
 
        String per_culture_hobby = entity.getPer_culture_hobby();
        if (per_culture_hobby != null) {
            stmt.bindString(20, per_culture_hobby);
        }
 
        String per_read_hobby = entity.getPer_read_hobby();
        if (per_read_hobby != null) {
            stmt.bindString(21, per_read_hobby);
        }
        stmt.bindLong(22, entity.getPer_read_time());
 
        String per_tv_hobby = entity.getPer_tv_hobby();
        if (per_tv_hobby != null) {
            stmt.bindString(23, per_tv_hobby);
        }
        stmt.bindLong(24, entity.getPer_tv_time());
 
        String per_like_idol = entity.getPer_like_idol();
        if (per_like_idol != null) {
            stmt.bindString(25, per_like_idol);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PerSocialInfor entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String per_user_guid = entity.getPer_user_guid();
        if (per_user_guid != null) {
            stmt.bindString(2, per_user_guid);
        }
        stmt.bindLong(3, entity.getPer_social_infor_id());
        stmt.bindLong(4, entity.getPer_addr_list_id());
 
        String per_motto = entity.getPer_motto();
        if (per_motto != null) {
            stmt.bindString(5, per_motto);
        }
 
        String per_contact_purpose = entity.getPer_contact_purpose();
        if (per_contact_purpose != null) {
            stmt.bindString(6, per_contact_purpose);
        }
 
        String per_giving_field = entity.getPer_giving_field();
        if (per_giving_field != null) {
            stmt.bindString(7, per_giving_field);
        }
        stmt.bindLong(8, entity.getPer_marriage());
        stmt.bindLong(9, entity.getPer_children());
 
        String per_birthday = entity.getPer_birthday();
        if (per_birthday != null) {
            stmt.bindString(10, per_birthday);
        }
 
        String per_birth_date = entity.getPer_birth_date();
        if (per_birth_date != null) {
            stmt.bindString(11, per_birth_date);
        }
 
        String per_birth_lunar = entity.getPer_birth_lunar();
        if (per_birth_lunar != null) {
            stmt.bindString(12, per_birth_lunar);
        }
        stmt.bindLong(13, entity.getPer_zodiac());
        stmt.bindLong(14, entity.getPer_constellation());
 
        String per_enneagram = entity.getPer_enneagram();
        if (per_enneagram != null) {
            stmt.bindString(15, per_enneagram);
        }
 
        String per_character = entity.getPer_character();
        if (per_character != null) {
            stmt.bindString(16, per_character);
        }
 
        String per_sport_hobby = entity.getPer_sport_hobby();
        if (per_sport_hobby != null) {
            stmt.bindString(17, per_sport_hobby);
        }
 
        String per_ent_hobby = entity.getPer_ent_hobby();
        if (per_ent_hobby != null) {
            stmt.bindString(18, per_ent_hobby);
        }
 
        String per_leisure_hobby = entity.getPer_leisure_hobby();
        if (per_leisure_hobby != null) {
            stmt.bindString(19, per_leisure_hobby);
        }
 
        String per_culture_hobby = entity.getPer_culture_hobby();
        if (per_culture_hobby != null) {
            stmt.bindString(20, per_culture_hobby);
        }
 
        String per_read_hobby = entity.getPer_read_hobby();
        if (per_read_hobby != null) {
            stmt.bindString(21, per_read_hobby);
        }
        stmt.bindLong(22, entity.getPer_read_time());
 
        String per_tv_hobby = entity.getPer_tv_hobby();
        if (per_tv_hobby != null) {
            stmt.bindString(23, per_tv_hobby);
        }
        stmt.bindLong(24, entity.getPer_tv_time());
 
        String per_like_idol = entity.getPer_like_idol();
        if (per_like_idol != null) {
            stmt.bindString(25, per_like_idol);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PerSocialInfor readEntity(Cursor cursor, int offset) {
        PerSocialInfor entity = new PerSocialInfor( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // per_user_guid
            cursor.getInt(offset + 2), // per_social_infor_id
            cursor.getInt(offset + 3), // per_addr_list_id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // per_motto
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // per_contact_purpose
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // per_giving_field
            cursor.getInt(offset + 7), // per_marriage
            cursor.getInt(offset + 8), // per_children
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // per_birthday
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // per_birth_date
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // per_birth_lunar
            cursor.getInt(offset + 12), // per_zodiac
            cursor.getInt(offset + 13), // per_constellation
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // per_enneagram
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // per_character
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // per_sport_hobby
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // per_ent_hobby
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // per_leisure_hobby
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // per_culture_hobby
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // per_read_hobby
            cursor.getInt(offset + 21), // per_read_time
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // per_tv_hobby
            cursor.getInt(offset + 23), // per_tv_time
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24) // per_like_idol
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PerSocialInfor entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPer_user_guid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPer_social_infor_id(cursor.getInt(offset + 2));
        entity.setPer_addr_list_id(cursor.getInt(offset + 3));
        entity.setPer_motto(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPer_contact_purpose(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPer_giving_field(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPer_marriage(cursor.getInt(offset + 7));
        entity.setPer_children(cursor.getInt(offset + 8));
        entity.setPer_birthday(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPer_birth_date(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPer_birth_lunar(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPer_zodiac(cursor.getInt(offset + 12));
        entity.setPer_constellation(cursor.getInt(offset + 13));
        entity.setPer_enneagram(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setPer_character(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setPer_sport_hobby(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setPer_ent_hobby(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setPer_leisure_hobby(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setPer_culture_hobby(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setPer_read_hobby(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setPer_read_time(cursor.getInt(offset + 21));
        entity.setPer_tv_hobby(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setPer_tv_time(cursor.getInt(offset + 23));
        entity.setPer_like_idol(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PerSocialInfor entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PerSocialInfor entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PerSocialInfor entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
